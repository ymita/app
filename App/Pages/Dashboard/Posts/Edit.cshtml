@page
@model App.Pages.Dashboard.Posts.EditModel

@{
    ViewData["Title"] = "Edit";
}

    
    <h4>
        <a asp-page="./Index" class="text-decoration-none">
            <svg width="1.5rem" height="1.5rem" viewBox="0 0 16 16" style="margin-bottom: 0.4rem;" class="bi bi-arrow-left-circle" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" d="M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                <path fill-rule="evenodd" d="M8.354 11.354a.5.5 0 0 0 0-.708L5.707 8l2.647-2.646a.5.5 0 1 0-.708-.708l-3 3a.5.5 0 0 0 0 .708l3 3a.5.5 0 0 0 .708 0z" />
                <path fill-rule="evenodd" d="M11.5 8a.5.5 0 0 0-.5-.5H6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 .5-.5z" />
            </svg>
        </a>
        投稿の編集
    </h4>
<hr />
<div class="row">
    <form method="post" class="row col-md-12">
        <div class="col-md-8">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Post.Id" />
            <div class="form-group">
                <label asp-for="Post.Title" class="control-label"></label>
                <input asp-for="Post.Title" class="form-control" />
                <span asp-validation-for="Post.Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Post.Description" class="control-label"></label>
                @*<textarea name="editordata"></textarea>*@
                <textarea id="summernote" asp-for="Post.Description" class="form-control" rows="10"></textarea>
                <span asp-validation-for="Post.Description" class="text-danger"></span>
            </div>

        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label>ステータス: </label>
                @if (Model.Post.IsDraft)
                {
                    <text>下書き</text>
                }
                else
                {
                    <text>公開済み</text>
                }
                <div>
                    <input type="submit" name="draft" value="下書き" class="btn btn-secondary" asp-page-handler="OnPostAsync" />
                    <input type="submit" name="publish" value="公開" class="btn btn-primary" asp-page-handler="OnPostAsync" />
                    <a href="/@User.Identity.Name/@Model.Post.Id" target="_blank">記事を表示</a>
                </div>
            </div>

            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" type="checkbox" onchange="toggleUpdatedDateVisibility();" /> 更新日を指定
                </label>
            </div>

            <div class="form-group" style="display: none;">
                <label asp-for="Post.PublishedDate" class="control-label"></label>
                <input asp-for="Post.PublishedDate" class="form-control" type="hidden" />
            </div>

            <div class="form-group" id="updatedDateContainer" style="display: none;">
                <label asp-for="Post.UpdatedDate" class="control-label"></label>
                <input asp-for="Post.UpdatedDate" id="updatedDate" class="form-control" />
                <span asp-validation-for="Post.UpdatedDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Tags" class="control-label"></label>
                <input id="myInput" type="text" class="form-control" onkeyup="myFunction()"/>
                <div id="addTag"
                     style="display: none; padding-right: 10.5px; padding-left: 10.5px; padding-top: 5.25px; padding-bottom: 5.25px; border: 1px solid gray;"
                     onclick="onAddTag()">
                    <span id="addTagLabel" style="font-weight: bold;"></span> を追加する。
                </div>
                <ul id="myUL">
                    @{
                        if (Model.TagsInView != null && Model.TagsInView.Count > 0)
                        {
                            @for (var i = 0; i < Model.TagsInView.Count; i++)
                            {
                                <li>
                                    <input asp-for="@Model.TagsInView[i].IsSelected" />
                                    <label asp-for="@Model.TagsInView[i].IsSelected">@Model.TagsInView[i].TagName</label>
                                    <input type="hidden" asp-for="@Model.TagsInView[i].Id" />
                                    <input type="hidden" asp-for="@Model.TagsInView[i].TagName" />
                                </li>
                            }
                        }
                    }
                    @*<li id="newTag" style="display: none;"></li>*@
                </ul>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    @*<script src="https://code.jquery.com/jquery-3.5.1.min.js" crossorigin="anonymous"></script>*@
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>

    @*<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>*@

    <link href="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/summernote@0.8.18/dist/summernote-bs4.min.js"></script>
    <script>
        // エディタの初期化
        $('#summernote').summernote();

        // 更新日の初期化
        var date = new Date();
        var year = date.getFullYear();
        var month = ('0' + (date.getMonth() + 1)).slice(-2);
        var day = date.getDate();
        var hour = ('0' + date.getHours()).slice(-2);
        var minute = ('0' + date.getMinutes()).slice(-2);
        var formattedDate = year + '-' + month + '-' + day + 'T' + hour + ':' + minute;
        document.getElementById("updatedDate").value = formattedDate;

        function toggleUpdatedDateVisibility() {
            var container = document.getElementById("updatedDateContainer");
            if (container.style.display === '') {
                container.style.display = 'none';
            } else {
                container.style.display = '';
            }
        }
    </script>
}
<script>
    function myFunction() {
        // Declare variables
        var input, filter, ul, li, a, i, txtValue;
        input = document.getElementById('myInput');
        filter = input.value.toUpperCase();
        ul = document.getElementById("myUL");
        li = ul.getElementsByTagName('li');

        // Loop through all list items, and hide those who don't match the search query
        for (i = 0; i < li.length; i++) {
            txtValue = li[i].innerText;
            if (txtValue.toUpperCase().indexOf(filter) > -1) {
                li[i].style.display = "";
            } else {
                li[i].style.display = "none";
            }
        }

        var visibleTags = Array.from(li).filter(x => x.style.display === "").length;
        if (visibleTags === 0 && input.value !== "") {
            console.log("show add tag menu");

            document.getElementById("addTag").style.display = "";
            document.getElementById("addTagLabel").textContent = input.value;
        }
    }

    var newTagCount = 0;

    function onAddTag() {
        var ul = document.getElementById("myUL");
        var fragment = document.createDocumentFragment();
        var li = document.createElement('li');

        // checkbox の生成
        var checkbox = document.createElement('input');
        checkbox.setAttribute('type','checkbox');
        var newTagKey = 'newTag_' + newTagCount;
        checkbox.setAttribute('name', newTagKey + "_IsSelected");
        checkbox.setAttribute('id', newTagKey + "_IsSelected");
        checkbox.setAttribute('checked', 'checked');
        checkbox.value = true;
        li.appendChild(checkbox);
        newTagCount = newTagCount + 1;

        var labelText = document.getElementById("addTagLabel").textContent;
        console.log(labelText);
        // checkbox に対応する label の生成
        var label = document.createElement('label');
        label.setAttribute('for', newTagKey + "_IsSelected");
        var textNode = document.createTextNode(labelText);
        label.appendChild(textNode);
        li.appendChild(label);

        // checkbox に対応する hidden フィールドの生成
        var hidden = document.createElement('input');
        hidden.setAttribute("type", "hidden");
        hidden.setAttribute('name', newTagKey + "_TagName");
        hidden.value = labelText;
        li.appendChild(hidden);

        fragment.appendChild(li);
        ul.appendChild(fragment);

        document.getElementById("myInput").value = '';

        document.getElementById("addTagLabel").textContent = "";
        document.getElementById("addTag").style.display = "none";

        myFunction();
    }
</script>